use clap::{Parser, Subcommand};
use std::path::PathBuf;
use std::env;

// mod db; // 引入 db.rs 模块

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    /// Initializes the dlog database.
    Init {
        #[arg(default_value = "dlog.db")]
        db_name: String,
    },
    /// Logs a new entry.
    Log,
    /// Gets logs for the current directory.
    Get {
        #[arg(short, long)]
        recursive: bool,
    },
}

fn main() {
    let cli = Cli::parse();

    // ... 省略了 db 和 config_dir 的代码 ...

    match &cli.command {
        Some(Commands::Init { db_name }) => {
            println!("Initializing database with name: {}", db_name);
            // 剩下的数据库初始化逻辑
        },
        Some(Commands::Log) => {
            println!("你正在使用 dlog 核心功能");
        },
        Some(Commands::Get { recursive }) => {
            if *recursive {
                println!("你正在递归查看当前目录下的 log 日志");
            } else {
                println!("你正在查看当下目录关联的 log 日志");
            }
        },
        None => {
            println!("No command specified. Use --help to see available commands.");
        }
    }
}


// fn main() {
//     let cli = Cli::parse();

//     let home_dir = dirs::home_dir().expect("Could not find home directory");
//     let mut config_dir = PathBuf::from(&home_dir);
//     config_dir.push(".config/dlog");

//     match &cli.command {
//         Some(Commands::Init { db_name }) => {
//             let mut db_path = config_dir.clone();
//             db_path.push(db_name);
//             // 检查数据库是否存在，然后调用 db::initialize_db
//             if db_path.exists() {
//                 println!("Database already exists at: {}", db_path.display());
//             } else {
//                 match db::initialize_db(&db_path) {
//                     Ok(_) => println!("Database initialized at: {}", db_path.display()),
//                     Err(e) => eprintln!("Error initializing database: {}", e),
//                 }
//             }
//         },
//         Some(Commands::Log) => {
//             println!("Log command is not yet implemented.");
//         },
//         Some(Commands::Get { recursive }) => {
//             println!("Get command is not yet implemented. Recursive: {}", recursive);
//         },
//         None => {
//             println!("No command specified. Use --help to see available commands.");
//         }
//     }
// }
